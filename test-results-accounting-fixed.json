{"numFailedTestSuites":2,"numFailedTests":35,"numPassedTestSuites":0,"numPassedTests":6,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":2,"numTotalTests":41,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1761781141412,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["Performance Tests: Accounting API","API Response Time"],"duration":66,"failing":false,"failureDetails":[{}],"failureMessages":["TypeError: fetch failed\n    at node:internal/deps/undici/undici:13502:13\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at apiRequest (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:37:20)\n    at C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:67:36\n    at measureTime (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:30:18)\n    at Object.<anonymous> (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:66:28)"],"fullName":"Performance Tests: Accounting API API Response Time should return monthly summary in < 500ms","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781144888,"status":"failed","title":"should return monthly summary in < 500ms"},{"ancestorTitles":["Performance Tests: Accounting API","API Response Time"],"duration":12,"failing":false,"failureDetails":[{}],"failureMessages":["TypeError: fetch failed\n    at node:internal/deps/undici/undici:13502:13\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at apiRequest (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:37:20)\n    at C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:79:36\n    at measureTime (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:30:18)\n    at Object.<anonymous> (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:77:28)"],"fullName":"Performance Tests: Accounting API API Response Time should return filtered monthly summary in < 500ms","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781144961,"status":"failed","title":"should return filtered monthly summary in < 500ms"},{"ancestorTitles":["Performance Tests: Accounting API","API Response Time"],"duration":7,"failing":false,"failureDetails":[{}],"failureMessages":["TypeError: fetch failed\n    at node:internal/deps/undici/undici:13502:13\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at apiRequest (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:37:20)\n    at Object.<anonymous> (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:90:39)"],"fullName":"Performance Tests: Accounting API API Response Time should return company stats in < 500ms","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781144974,"status":"failed","title":"should return company stats in < 500ms"},{"ancestorTitles":["Performance Tests: Accounting API","API Response Time"],"duration":5,"failing":false,"failureDetails":[{}],"failureMessages":["TypeError: fetch failed\n    at node:internal/deps/undici/undici:13502:13\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at apiRequest (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:37:20)\n    at Object.<anonymous> (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:110:39)"],"fullName":"Performance Tests: Accounting API API Response Time should handle company update (PATCH) in < 500ms","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781144982,"status":"failed","title":"should handle company update (PATCH) in < 500ms"},{"ancestorTitles":["Performance Tests: Accounting API","Excel Export Performance"],"duration":6,"failing":false,"failureDetails":[{}],"failureMessages":["TypeError: fetch failed\n    at node:internal/deps/undici/undici:13502:13\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:140:26\n    at measureTime (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:30:18)\n    at Object.<anonymous> (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:139:28)"],"fullName":"Performance Tests: Accounting API Excel Export Performance should generate Excel export in < 3 seconds","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781144987,"status":"failed","title":"should generate Excel export in < 3 seconds"},{"ancestorTitles":["Performance Tests: Accounting API","Excel Export Performance"],"duration":7,"failing":false,"failureDetails":[{}],"failureMessages":["TypeError: fetch failed\n    at node:internal/deps/undici/undici:13502:13\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:154:26\n    at measureTime (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:30:18)\n    at Object.<anonymous> (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:152:28)"],"fullName":"Performance Tests: Accounting API Excel Export Performance should generate filtered Excel export in < 3 seconds","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781144993,"status":"failed","title":"should generate filtered Excel export in < 3 seconds"},{"ancestorTitles":["Performance Tests: Accounting API","Excel Export Performance"],"duration":4,"failing":false,"failureDetails":[{}],"failureMessages":["TypeError: fetch failed\n    at node:internal/deps/undici/undici:13502:13\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:177:28\n    at measureTime (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:30:18)\n    at Object.<anonymous> (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:175:30)"],"fullName":"Performance Tests: Accounting API Excel Export Performance should handle multiple category exports efficiently","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781145001,"status":"failed","title":"should handle multiple category exports efficiently"},{"ancestorTitles":["Performance Tests: Accounting API","Concurrent Request Handling"],"duration":11,"failing":false,"failureDetails":[{}],"failureMessages":["TypeError: fetch failed\n    at node:internal/deps/undici/undici:13502:13\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at apiRequest (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:37:20)\n    at async Promise.all (index 0)\n    at C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:207:25\n    at measureTime (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:30:18)\n    at Object.<anonymous> (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:202:28)"],"fullName":"Performance Tests: Accounting API Concurrent Request Handling should handle 5 concurrent monthly summary requests","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781145006,"status":"failed","title":"should handle 5 concurrent monthly summary requests"},{"ancestorTitles":["Performance Tests: Accounting API","Concurrent Request Handling"],"duration":5,"failing":false,"failureDetails":[{}],"failureMessages":["TypeError: fetch failed\n    at node:internal/deps/undici/undici:13502:13\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at apiRequest (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:37:20)\n    at Object.<anonymous> (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:224:39)"],"fullName":"Performance Tests: Accounting API Concurrent Request Handling should handle 10 concurrent company stats requests","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781145018,"status":"failed","title":"should handle 10 concurrent company stats requests"},{"ancestorTitles":["Performance Tests: Accounting API","Concurrent Request Handling"],"duration":10,"failing":false,"failureDetails":[{}],"failureMessages":["TypeError: fetch failed\n    at node:internal/deps/undici/undici:13502:13\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at apiRequest (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:37:20)\n    at async Promise.all (index 0)\n    at C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:264:25\n    at measureTime (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:30:18)\n    at Object.<anonymous> (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:253:28)"],"fullName":"Performance Tests: Accounting API Concurrent Request Handling should handle mixed concurrent requests efficiently","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781145024,"status":"failed","title":"should handle mixed concurrent requests efficiently"},{"ancestorTitles":["Performance Tests: Accounting API","Data Volume Performance"],"duration":4,"failing":false,"failureDetails":[{}],"failureMessages":["TypeError: fetch failed\n    at node:internal/deps/undici/undici:13502:13\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at apiRequest (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:37:20)\n    at C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:289:36\n    at measureTime (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:30:18)\n    at Object.<anonymous> (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:287:36)"],"fullName":"Performance Tests: Accounting API Data Volume Performance should handle large result sets efficiently","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781145034,"status":"failed","title":"should handle large result sets efficiently"},{"ancestorTitles":["Performance Tests: Accounting API","Data Volume Performance"],"duration":4,"failing":false,"failureDetails":[{}],"failureMessages":["TypeError: fetch failed\n    at node:internal/deps/undici/undici:13502:13\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at apiRequest (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:37:20)\n    at Object.<anonymous> (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:311:39)"],"fullName":"Performance Tests: Accounting API Data Volume Performance should handle company stats with 12 months efficiently","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781145039,"status":"failed","title":"should handle company stats with 12 months efficiently"},{"ancestorTitles":["Performance Tests: Accounting API","Data Volume Performance"],"duration":4,"failing":false,"failureDetails":[{}],"failureMessages":["TypeError: fetch failed\n    at node:internal/deps/undici/undici:13502:13\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at apiRequest (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:37:20)\n    at Object.<anonymous> (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:331:39)"],"fullName":"Performance Tests: Accounting API Data Volume Performance should handle company stats with 60 months efficiently","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781145044,"status":"failed","title":"should handle company stats with 60 months efficiently"},{"ancestorTitles":["Performance Tests: Accounting API","Database Query Performance"],"duration":3,"failing":false,"failureDetails":[{}],"failureMessages":["TypeError: fetch failed\n    at node:internal/deps/undici/undici:13502:13\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at apiRequest (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:37:20)\n    at C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:360:36\n    at measureTime (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:30:18)\n    at Object.<anonymous> (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:359:28)"],"fullName":"Performance Tests: Accounting API Database Query Performance should execute VIEW queries efficiently","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781145049,"status":"failed","title":"should execute VIEW queries efficiently"},{"ancestorTitles":["Performance Tests: Accounting API","Database Query Performance"],"duration":4,"failing":false,"failureDetails":[{}],"failureMessages":["TypeError: fetch failed\n    at node:internal/deps/undici/undici:13502:13\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at apiRequest (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:37:20)\n    at C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:373:36\n    at measureTime (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:30:18)\n    at Object.<anonymous> (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:371:28)"],"fullName":"Performance Tests: Accounting API Database Query Performance should handle filtered VIEW queries efficiently","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781145052,"status":"failed","title":"should handle filtered VIEW queries efficiently"},{"ancestorTitles":["Performance Tests: Accounting API","Performance Regression Detection"],"duration":4,"failing":false,"failureDetails":[{}],"failureMessages":["TypeError: fetch failed\n    at node:internal/deps/undici/undici:13502:13\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at apiRequest (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:37:20)\n    at C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:395:38\n    at measureTime (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:30:18)\n    at Object.<anonymous> (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:394:30)"],"fullName":"Performance Tests: Accounting API Performance Regression Detection should maintain consistent performance across multiple runs","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781145056,"status":"failed","title":"should maintain consistent performance across multiple runs"},{"ancestorTitles":["Performance Tests: Accounting API","Resource Utilization"],"duration":4,"failing":false,"failureDetails":[{}],"failureMessages":["TypeError: fetch failed\n    at node:internal/deps/undici/undici:13502:13\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at apiRequest (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:37:20)\n    at C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:434:32\n    at measureTime (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:30:18)\n    at Object.<anonymous> (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts:433:30)"],"fullName":"Performance Tests: Accounting API Resource Utilization should handle rapid sequential requests without degradation","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781145060,"status":"failed","title":"should handle rapid sequential requests without degradation"}],"endTime":1761781145168,"message":"  ● Performance Tests: Accounting API › API Response Time › should return monthly summary in < 500ms\n\n    TypeError: fetch failed\n\n    \u001b[0m \u001b[90m 35 |\u001b[39m \u001b[90m// Helper to make API requests\u001b[39m\n     \u001b[90m 36 |\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m apiRequest(endpoint\u001b[33m:\u001b[39m string\u001b[33m,\u001b[39m options\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[33mRequestInit\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 37 |\u001b[39m   \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m fetch(\u001b[32m`${API_BASE_URL}${endpoint}`\u001b[39m\u001b[33m,\u001b[39m {\n     \u001b[90m    |\u001b[39m                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 38 |\u001b[39m     \u001b[33m...\u001b[39moptions\u001b[33m,\u001b[39m\n     \u001b[90m 39 |\u001b[39m     headers\u001b[33m:\u001b[39m {\n     \u001b[90m 40 |\u001b[39m       \u001b[32m'Content-Type'\u001b[39m\u001b[33m:\u001b[39m \u001b[32m'application/json; charset=utf-8'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\n      at apiRequest (src/__tests__/performance/accounting.test.ts:37:20)\n      at src/__tests__/performance/accounting.test.ts:67:36\n      at measureTime (src/__tests__/performance/accounting.test.ts:30:18)\n      at Object.<anonymous> (src/__tests__/performance/accounting.test.ts:66:28)\n\n    Cause:\n    AggregateError:\n\n\n  ● Performance Tests: Accounting API › API Response Time › should return filtered monthly summary in < 500ms\n\n    TypeError: fetch failed\n\n    \u001b[0m \u001b[90m 35 |\u001b[39m \u001b[90m// Helper to make API requests\u001b[39m\n     \u001b[90m 36 |\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m apiRequest(endpoint\u001b[33m:\u001b[39m string\u001b[33m,\u001b[39m options\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[33mRequestInit\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 37 |\u001b[39m   \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m fetch(\u001b[32m`${API_BASE_URL}${endpoint}`\u001b[39m\u001b[33m,\u001b[39m {\n     \u001b[90m    |\u001b[39m                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 38 |\u001b[39m     \u001b[33m...\u001b[39moptions\u001b[33m,\u001b[39m\n     \u001b[90m 39 |\u001b[39m     headers\u001b[33m:\u001b[39m {\n     \u001b[90m 40 |\u001b[39m       \u001b[32m'Content-Type'\u001b[39m\u001b[33m:\u001b[39m \u001b[32m'application/json; charset=utf-8'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\n      at apiRequest (src/__tests__/performance/accounting.test.ts:37:20)\n      at src/__tests__/performance/accounting.test.ts:79:36\n      at measureTime (src/__tests__/performance/accounting.test.ts:30:18)\n      at Object.<anonymous> (src/__tests__/performance/accounting.test.ts:77:28)\n\n    Cause:\n    AggregateError:\n\n\n  ● Performance Tests: Accounting API › API Response Time › should return company stats in < 500ms\n\n    TypeError: fetch failed\n\n    \u001b[0m \u001b[90m 35 |\u001b[39m \u001b[90m// Helper to make API requests\u001b[39m\n     \u001b[90m 36 |\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m apiRequest(endpoint\u001b[33m:\u001b[39m string\u001b[33m,\u001b[39m options\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[33mRequestInit\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 37 |\u001b[39m   \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m fetch(\u001b[32m`${API_BASE_URL}${endpoint}`\u001b[39m\u001b[33m,\u001b[39m {\n     \u001b[90m    |\u001b[39m                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 38 |\u001b[39m     \u001b[33m...\u001b[39moptions\u001b[33m,\u001b[39m\n     \u001b[90m 39 |\u001b[39m     headers\u001b[33m:\u001b[39m {\n     \u001b[90m 40 |\u001b[39m       \u001b[32m'Content-Type'\u001b[39m\u001b[33m:\u001b[39m \u001b[32m'application/json; charset=utf-8'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\n      at apiRequest (src/__tests__/performance/accounting.test.ts:37:20)\n      at Object.<anonymous> (src/__tests__/performance/accounting.test.ts:90:39)\n\n    Cause:\n    AggregateError:\n\n\n  ● Performance Tests: Accounting API › API Response Time › should handle company update (PATCH) in < 500ms\n\n    TypeError: fetch failed\n\n    \u001b[0m \u001b[90m 35 |\u001b[39m \u001b[90m// Helper to make API requests\u001b[39m\n     \u001b[90m 36 |\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m apiRequest(endpoint\u001b[33m:\u001b[39m string\u001b[33m,\u001b[39m options\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[33mRequestInit\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 37 |\u001b[39m   \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m fetch(\u001b[32m`${API_BASE_URL}${endpoint}`\u001b[39m\u001b[33m,\u001b[39m {\n     \u001b[90m    |\u001b[39m                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 38 |\u001b[39m     \u001b[33m...\u001b[39moptions\u001b[33m,\u001b[39m\n     \u001b[90m 39 |\u001b[39m     headers\u001b[33m:\u001b[39m {\n     \u001b[90m 40 |\u001b[39m       \u001b[32m'Content-Type'\u001b[39m\u001b[33m:\u001b[39m \u001b[32m'application/json; charset=utf-8'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\n      at apiRequest (src/__tests__/performance/accounting.test.ts:37:20)\n      at Object.<anonymous> (src/__tests__/performance/accounting.test.ts:110:39)\n\n    Cause:\n    AggregateError:\n\n\n  ● Performance Tests: Accounting API › Excel Export Performance › should generate Excel export in < 3 seconds\n\n    TypeError: fetch failed\n\n    \u001b[0m \u001b[90m 138 |\u001b[39m     it(\u001b[32m'should generate Excel export in < 3 seconds'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n     \u001b[90m 139 |\u001b[39m       \u001b[36mconst\u001b[39m { duration } \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m measureTime(\u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 140 |\u001b[39m         \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m fetch(\u001b[32m`${API_BASE_URL}/api/accounting/export?month=2025-01`\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 141 |\u001b[39m         expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m200\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 142 |\u001b[39m         \u001b[36mconst\u001b[39m blob \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m response\u001b[33m.\u001b[39mblob()\u001b[33m;\u001b[39m\n     \u001b[90m 143 |\u001b[39m         expect(blob\u001b[33m.\u001b[39msize)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\n\n      at src/__tests__/performance/accounting.test.ts:140:26\n      at measureTime (src/__tests__/performance/accounting.test.ts:30:18)\n      at Object.<anonymous> (src/__tests__/performance/accounting.test.ts:139:28)\n\n    Cause:\n    AggregateError:\n\n\n  ● Performance Tests: Accounting API › Excel Export Performance › should generate filtered Excel export in < 3 seconds\n\n    TypeError: fetch failed\n\n    \u001b[0m \u001b[90m 152 |\u001b[39m       \u001b[36mconst\u001b[39m { duration } \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m measureTime(\u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n     \u001b[90m 153 |\u001b[39m         \u001b[36mconst\u001b[39m category \u001b[33m=\u001b[39m encodeURIComponent(\u001b[32m'협력업체-원자재'\u001b[39m)\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 154 |\u001b[39m         \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m fetch(\u001b[32m`${API_BASE_URL}/api/accounting/export?month=2025-01&category=${category}`\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 155 |\u001b[39m         expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m200\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 156 |\u001b[39m         \u001b[36mconst\u001b[39m blob \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m response\u001b[33m.\u001b[39mblob()\u001b[33m;\u001b[39m\n     \u001b[90m 157 |\u001b[39m         \u001b[36mreturn\u001b[39m blob\u001b[33m;\u001b[39m\u001b[0m\n\n      at src/__tests__/performance/accounting.test.ts:154:26\n      at measureTime (src/__tests__/performance/accounting.test.ts:30:18)\n      at Object.<anonymous> (src/__tests__/performance/accounting.test.ts:152:28)\n\n    Cause:\n    AggregateError:\n\n\n  ● Performance Tests: Accounting API › Excel Export Performance › should handle multiple category exports efficiently\n\n    TypeError: fetch failed\n\n    \u001b[0m \u001b[90m 175 |\u001b[39m         \u001b[36mconst\u001b[39m { duration } \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m measureTime(\u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n     \u001b[90m 176 |\u001b[39m           \u001b[36mconst\u001b[39m encoded \u001b[33m=\u001b[39m encodeURIComponent(category)\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 177 |\u001b[39m           \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m fetch(\u001b[32m`${API_BASE_URL}/api/accounting/export?month=2025-01&category=${encoded}`\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 178 |\u001b[39m           expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m200\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 179 |\u001b[39m           \u001b[36mreturn\u001b[39m response\u001b[33m;\u001b[39m\n     \u001b[90m 180 |\u001b[39m         })\u001b[33m;\u001b[39m\u001b[0m\n\n      at src/__tests__/performance/accounting.test.ts:177:28\n      at measureTime (src/__tests__/performance/accounting.test.ts:30:18)\n      at Object.<anonymous> (src/__tests__/performance/accounting.test.ts:175:30)\n\n    Cause:\n    AggregateError:\n\n\n  ● Performance Tests: Accounting API › Concurrent Request Handling › should handle 5 concurrent monthly summary requests\n\n    TypeError: fetch failed\n\n    \u001b[0m \u001b[90m 35 |\u001b[39m \u001b[90m// Helper to make API requests\u001b[39m\n     \u001b[90m 36 |\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m apiRequest(endpoint\u001b[33m:\u001b[39m string\u001b[33m,\u001b[39m options\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[33mRequestInit\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 37 |\u001b[39m   \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m fetch(\u001b[32m`${API_BASE_URL}${endpoint}`\u001b[39m\u001b[33m,\u001b[39m {\n     \u001b[90m    |\u001b[39m                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 38 |\u001b[39m     \u001b[33m...\u001b[39moptions\u001b[33m,\u001b[39m\n     \u001b[90m 39 |\u001b[39m     headers\u001b[33m:\u001b[39m {\n     \u001b[90m 40 |\u001b[39m       \u001b[32m'Content-Type'\u001b[39m\u001b[33m:\u001b[39m \u001b[32m'application/json; charset=utf-8'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\n      at apiRequest (src/__tests__/performance/accounting.test.ts:37:20)\n          at async Promise.all (index 0)\n      at src/__tests__/performance/accounting.test.ts:207:25\n      at measureTime (src/__tests__/performance/accounting.test.ts:30:18)\n      at Object.<anonymous> (src/__tests__/performance/accounting.test.ts:202:28)\n\n    Cause:\n    AggregateError:\n\n\n  ● Performance Tests: Accounting API › Concurrent Request Handling › should handle 10 concurrent company stats requests\n\n    TypeError: fetch failed\n\n    \u001b[0m \u001b[90m 35 |\u001b[39m \u001b[90m// Helper to make API requests\u001b[39m\n     \u001b[90m 36 |\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m apiRequest(endpoint\u001b[33m:\u001b[39m string\u001b[33m,\u001b[39m options\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[33mRequestInit\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 37 |\u001b[39m   \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m fetch(\u001b[32m`${API_BASE_URL}${endpoint}`\u001b[39m\u001b[33m,\u001b[39m {\n     \u001b[90m    |\u001b[39m                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 38 |\u001b[39m     \u001b[33m...\u001b[39moptions\u001b[33m,\u001b[39m\n     \u001b[90m 39 |\u001b[39m     headers\u001b[33m:\u001b[39m {\n     \u001b[90m 40 |\u001b[39m       \u001b[32m'Content-Type'\u001b[39m\u001b[33m:\u001b[39m \u001b[32m'application/json; charset=utf-8'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\n      at apiRequest (src/__tests__/performance/accounting.test.ts:37:20)\n      at Object.<anonymous> (src/__tests__/performance/accounting.test.ts:224:39)\n\n    Cause:\n    AggregateError:\n\n\n  ● Performance Tests: Accounting API › Concurrent Request Handling › should handle mixed concurrent requests efficiently\n\n    TypeError: fetch failed\n\n    \u001b[0m \u001b[90m 35 |\u001b[39m \u001b[90m// Helper to make API requests\u001b[39m\n     \u001b[90m 36 |\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m apiRequest(endpoint\u001b[33m:\u001b[39m string\u001b[33m,\u001b[39m options\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[33mRequestInit\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 37 |\u001b[39m   \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m fetch(\u001b[32m`${API_BASE_URL}${endpoint}`\u001b[39m\u001b[33m,\u001b[39m {\n     \u001b[90m    |\u001b[39m                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 38 |\u001b[39m     \u001b[33m...\u001b[39moptions\u001b[33m,\u001b[39m\n     \u001b[90m 39 |\u001b[39m     headers\u001b[33m:\u001b[39m {\n     \u001b[90m 40 |\u001b[39m       \u001b[32m'Content-Type'\u001b[39m\u001b[33m:\u001b[39m \u001b[32m'application/json; charset=utf-8'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\n      at apiRequest (src/__tests__/performance/accounting.test.ts:37:20)\n          at async Promise.all (index 0)\n      at src/__tests__/performance/accounting.test.ts:264:25\n      at measureTime (src/__tests__/performance/accounting.test.ts:30:18)\n      at Object.<anonymous> (src/__tests__/performance/accounting.test.ts:253:28)\n\n    Cause:\n    AggregateError:\n\n\n  ● Performance Tests: Accounting API › Data Volume Performance › should handle large result sets efficiently\n\n    TypeError: fetch failed\n\n    \u001b[0m \u001b[90m 35 |\u001b[39m \u001b[90m// Helper to make API requests\u001b[39m\n     \u001b[90m 36 |\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m apiRequest(endpoint\u001b[33m:\u001b[39m string\u001b[33m,\u001b[39m options\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[33mRequestInit\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 37 |\u001b[39m   \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m fetch(\u001b[32m`${API_BASE_URL}${endpoint}`\u001b[39m\u001b[33m,\u001b[39m {\n     \u001b[90m    |\u001b[39m                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 38 |\u001b[39m     \u001b[33m...\u001b[39moptions\u001b[33m,\u001b[39m\n     \u001b[90m 39 |\u001b[39m     headers\u001b[33m:\u001b[39m {\n     \u001b[90m 40 |\u001b[39m       \u001b[32m'Content-Type'\u001b[39m\u001b[33m:\u001b[39m \u001b[32m'application/json; charset=utf-8'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\n      at apiRequest (src/__tests__/performance/accounting.test.ts:37:20)\n      at src/__tests__/performance/accounting.test.ts:289:36\n      at measureTime (src/__tests__/performance/accounting.test.ts:30:18)\n      at Object.<anonymous> (src/__tests__/performance/accounting.test.ts:287:36)\n\n    Cause:\n    AggregateError:\n\n\n  ● Performance Tests: Accounting API › Data Volume Performance › should handle company stats with 12 months efficiently\n\n    TypeError: fetch failed\n\n    \u001b[0m \u001b[90m 35 |\u001b[39m \u001b[90m// Helper to make API requests\u001b[39m\n     \u001b[90m 36 |\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m apiRequest(endpoint\u001b[33m:\u001b[39m string\u001b[33m,\u001b[39m options\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[33mRequestInit\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 37 |\u001b[39m   \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m fetch(\u001b[32m`${API_BASE_URL}${endpoint}`\u001b[39m\u001b[33m,\u001b[39m {\n     \u001b[90m    |\u001b[39m                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 38 |\u001b[39m     \u001b[33m...\u001b[39moptions\u001b[33m,\u001b[39m\n     \u001b[90m 39 |\u001b[39m     headers\u001b[33m:\u001b[39m {\n     \u001b[90m 40 |\u001b[39m       \u001b[32m'Content-Type'\u001b[39m\u001b[33m:\u001b[39m \u001b[32m'application/json; charset=utf-8'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\n      at apiRequest (src/__tests__/performance/accounting.test.ts:37:20)\n      at Object.<anonymous> (src/__tests__/performance/accounting.test.ts:311:39)\n\n    Cause:\n    AggregateError:\n\n\n  ● Performance Tests: Accounting API › Data Volume Performance › should handle company stats with 60 months efficiently\n\n    TypeError: fetch failed\n\n    \u001b[0m \u001b[90m 35 |\u001b[39m \u001b[90m// Helper to make API requests\u001b[39m\n     \u001b[90m 36 |\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m apiRequest(endpoint\u001b[33m:\u001b[39m string\u001b[33m,\u001b[39m options\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[33mRequestInit\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 37 |\u001b[39m   \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m fetch(\u001b[32m`${API_BASE_URL}${endpoint}`\u001b[39m\u001b[33m,\u001b[39m {\n     \u001b[90m    |\u001b[39m                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 38 |\u001b[39m     \u001b[33m...\u001b[39moptions\u001b[33m,\u001b[39m\n     \u001b[90m 39 |\u001b[39m     headers\u001b[33m:\u001b[39m {\n     \u001b[90m 40 |\u001b[39m       \u001b[32m'Content-Type'\u001b[39m\u001b[33m:\u001b[39m \u001b[32m'application/json; charset=utf-8'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\n      at apiRequest (src/__tests__/performance/accounting.test.ts:37:20)\n      at Object.<anonymous> (src/__tests__/performance/accounting.test.ts:331:39)\n\n    Cause:\n    AggregateError:\n\n\n  ● Performance Tests: Accounting API › Database Query Performance › should execute VIEW queries efficiently\n\n    TypeError: fetch failed\n\n    \u001b[0m \u001b[90m 35 |\u001b[39m \u001b[90m// Helper to make API requests\u001b[39m\n     \u001b[90m 36 |\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m apiRequest(endpoint\u001b[33m:\u001b[39m string\u001b[33m,\u001b[39m options\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[33mRequestInit\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 37 |\u001b[39m   \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m fetch(\u001b[32m`${API_BASE_URL}${endpoint}`\u001b[39m\u001b[33m,\u001b[39m {\n     \u001b[90m    |\u001b[39m                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 38 |\u001b[39m     \u001b[33m...\u001b[39moptions\u001b[33m,\u001b[39m\n     \u001b[90m 39 |\u001b[39m     headers\u001b[33m:\u001b[39m {\n     \u001b[90m 40 |\u001b[39m       \u001b[32m'Content-Type'\u001b[39m\u001b[33m:\u001b[39m \u001b[32m'application/json; charset=utf-8'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\n      at apiRequest (src/__tests__/performance/accounting.test.ts:37:20)\n      at src/__tests__/performance/accounting.test.ts:360:36\n      at measureTime (src/__tests__/performance/accounting.test.ts:30:18)\n      at Object.<anonymous> (src/__tests__/performance/accounting.test.ts:359:28)\n\n    Cause:\n    AggregateError:\n\n\n  ● Performance Tests: Accounting API › Database Query Performance › should handle filtered VIEW queries efficiently\n\n    TypeError: fetch failed\n\n    \u001b[0m \u001b[90m 35 |\u001b[39m \u001b[90m// Helper to make API requests\u001b[39m\n     \u001b[90m 36 |\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m apiRequest(endpoint\u001b[33m:\u001b[39m string\u001b[33m,\u001b[39m options\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[33mRequestInit\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 37 |\u001b[39m   \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m fetch(\u001b[32m`${API_BASE_URL}${endpoint}`\u001b[39m\u001b[33m,\u001b[39m {\n     \u001b[90m    |\u001b[39m                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 38 |\u001b[39m     \u001b[33m...\u001b[39moptions\u001b[33m,\u001b[39m\n     \u001b[90m 39 |\u001b[39m     headers\u001b[33m:\u001b[39m {\n     \u001b[90m 40 |\u001b[39m       \u001b[32m'Content-Type'\u001b[39m\u001b[33m:\u001b[39m \u001b[32m'application/json; charset=utf-8'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\n      at apiRequest (src/__tests__/performance/accounting.test.ts:37:20)\n      at src/__tests__/performance/accounting.test.ts:373:36\n      at measureTime (src/__tests__/performance/accounting.test.ts:30:18)\n      at Object.<anonymous> (src/__tests__/performance/accounting.test.ts:371:28)\n\n    Cause:\n    AggregateError:\n\n\n  ● Performance Tests: Accounting API › Performance Regression Detection › should maintain consistent performance across multiple runs\n\n    TypeError: fetch failed\n\n    \u001b[0m \u001b[90m 35 |\u001b[39m \u001b[90m// Helper to make API requests\u001b[39m\n     \u001b[90m 36 |\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m apiRequest(endpoint\u001b[33m:\u001b[39m string\u001b[33m,\u001b[39m options\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[33mRequestInit\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 37 |\u001b[39m   \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m fetch(\u001b[32m`${API_BASE_URL}${endpoint}`\u001b[39m\u001b[33m,\u001b[39m {\n     \u001b[90m    |\u001b[39m                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 38 |\u001b[39m     \u001b[33m...\u001b[39moptions\u001b[33m,\u001b[39m\n     \u001b[90m 39 |\u001b[39m     headers\u001b[33m:\u001b[39m {\n     \u001b[90m 40 |\u001b[39m       \u001b[32m'Content-Type'\u001b[39m\u001b[33m:\u001b[39m \u001b[32m'application/json; charset=utf-8'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\n      at apiRequest (src/__tests__/performance/accounting.test.ts:37:20)\n      at src/__tests__/performance/accounting.test.ts:395:38\n      at measureTime (src/__tests__/performance/accounting.test.ts:30:18)\n      at Object.<anonymous> (src/__tests__/performance/accounting.test.ts:394:30)\n\n    Cause:\n    AggregateError:\n\n\n  ● Performance Tests: Accounting API › Resource Utilization › should handle rapid sequential requests without degradation\n\n    TypeError: fetch failed\n\n    \u001b[0m \u001b[90m 35 |\u001b[39m \u001b[90m// Helper to make API requests\u001b[39m\n     \u001b[90m 36 |\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m apiRequest(endpoint\u001b[33m:\u001b[39m string\u001b[33m,\u001b[39m options\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[33mRequestInit\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 37 |\u001b[39m   \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m fetch(\u001b[32m`${API_BASE_URL}${endpoint}`\u001b[39m\u001b[33m,\u001b[39m {\n     \u001b[90m    |\u001b[39m                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 38 |\u001b[39m     \u001b[33m...\u001b[39moptions\u001b[33m,\u001b[39m\n     \u001b[90m 39 |\u001b[39m     headers\u001b[33m:\u001b[39m {\n     \u001b[90m 40 |\u001b[39m       \u001b[32m'Content-Type'\u001b[39m\u001b[33m:\u001b[39m \u001b[32m'application/json; charset=utf-8'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\n      at apiRequest (src/__tests__/performance/accounting.test.ts:37:20)\n      at src/__tests__/performance/accounting.test.ts:434:32\n      at measureTime (src/__tests__/performance/accounting.test.ts:30:18)\n      at Object.<anonymous> (src/__tests__/performance/accounting.test.ts:433:30)\n\n    Cause:\n    AggregateError:\n\n","name":"C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\performance\\accounting.test.ts","startTime":1761781142262,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Phase 2 Accounting API Tests","GET /api/accounting/monthly-summary"],"duration":63,"failing":false,"failureDetails":[{}],"failureMessages":["TypeError: fetch failed\n    at node:internal/deps/undici/undici:13502:13\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at apiRequest (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\api\\accounting.test.ts:21:20)\n    at Object.<anonymous> (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\api\\accounting.test.ts:60:34)"],"fullName":"Phase 2 Accounting API Tests GET /api/accounting/monthly-summary should return monthly summary with valid month parameter","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781144916,"status":"failed","title":"should return monthly summary with valid month parameter"},{"ancestorTitles":["Phase 2 Accounting API Tests","GET /api/accounting/monthly-summary"],"duration":12,"failing":false,"failureDetails":[{}],"failureMessages":["TypeError: fetch failed\n    at node:internal/deps/undici/undici:13502:13\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at apiRequest (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\api\\accounting.test.ts:21:20)\n    at Object.<anonymous> (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\api\\accounting.test.ts:87:34)"],"fullName":"Phase 2 Accounting API Tests GET /api/accounting/monthly-summary should use current month when month parameter not provided","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781144987,"status":"failed","title":"should use current month when month parameter not provided"},{"ancestorTitles":["Phase 2 Accounting API Tests","GET /api/accounting/monthly-summary"],"duration":5,"failing":false,"failureDetails":[{}],"failureMessages":["TypeError: fetch failed\n    at node:internal/deps/undici/undici:13502:13\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at apiRequest (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\api\\accounting.test.ts:21:20)\n    at Object.<anonymous> (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\api\\accounting.test.ts:97:34)"],"fullName":"Phase 2 Accounting API Tests GET /api/accounting/monthly-summary should filter by category when provided","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781144999,"status":"failed","title":"should filter by category when provided"},{"ancestorTitles":["Phase 2 Accounting API Tests","GET /api/accounting/monthly-summary"],"duration":5,"failing":false,"failureDetails":[{}],"failureMessages":["TypeError: fetch failed\n    at node:internal/deps/undici/undici:13502:13\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at apiRequest (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\api\\accounting.test.ts:21:20)\n    at Object.<anonymous> (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\api\\accounting.test.ts:111:34)"],"fullName":"Phase 2 Accounting API Tests GET /api/accounting/monthly-summary should handle invalid month format with 400 error","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781145004,"status":"failed","title":"should handle invalid month format with 400 error"},{"ancestorTitles":["Phase 2 Accounting API Tests","GET /api/accounting/monthly-summary"],"duration":5,"failing":false,"failureDetails":[{}],"failureMessages":["TypeError: fetch failed\n    at node:internal/deps/undici/undici:13502:13\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at apiRequest (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\api\\accounting.test.ts:21:20)\n    at Object.<anonymous> (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\api\\accounting.test.ts:128:36)"],"fullName":"Phase 2 Accounting API Tests GET /api/accounting/monthly-summary should handle Korean characters in category parameter","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781145009,"status":"failed","title":"should handle Korean characters in category parameter"},{"ancestorTitles":["Phase 2 Accounting API Tests","GET /api/accounting/monthly-summary"],"duration":4,"failing":false,"failureDetails":[{}],"failureMessages":["TypeError: fetch failed\n    at node:internal/deps/undici/undici:13502:13\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at apiRequest (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\api\\accounting.test.ts:21:20)\n    at Object.<anonymous> (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\api\\accounting.test.ts:136:24)"],"fullName":"Phase 2 Accounting API Tests GET /api/accounting/monthly-summary should calculate correct totals and aggregations","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781145015,"status":"failed","title":"should calculate correct totals and aggregations"},{"ancestorTitles":["Phase 2 Accounting API Tests","GET /api/accounting/monthly-summary"],"duration":4,"failing":false,"failureDetails":[{}],"failureMessages":["TypeError: fetch failed\n    at node:internal/deps/undici/undici:13502:13\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at apiRequest (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\api\\accounting.test.ts:21:20)\n    at Object.<anonymous> (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\api\\accounting.test.ts:152:24)"],"fullName":"Phase 2 Accounting API Tests GET /api/accounting/monthly-summary should return category summary with percentages","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781145019,"status":"failed","title":"should return category summary with percentages"},{"ancestorTitles":["Phase 2 Accounting API Tests","GET /api/companies/[id]/stats"],"duration":0,"failing":false,"failureDetails":[{}],"failureMessages":["TypeError: fetch failed\n    at node:internal/deps/undici/undici:13502:13\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at apiRequest (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\api\\accounting.test.ts:21:20)\n    at Object.<anonymous> (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\api\\accounting.test.ts:173:24)"],"fullName":"Phase 2 Accounting API Tests GET /api/companies/[id]/stats should return company stats with default 12 months","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781145029,"status":"failed","title":"should return company stats with default 12 months"},{"ancestorTitles":["Phase 2 Accounting API Tests","GET /api/companies/[id]/stats"],"duration":0,"failing":false,"failureDetails":[{}],"failureMessages":["TypeError: fetch failed\n    at node:internal/deps/undici/undici:13502:13\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at apiRequest (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\api\\accounting.test.ts:21:20)\n    at Object.<anonymous> (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\api\\accounting.test.ts:173:24)"],"fullName":"Phase 2 Accounting API Tests GET /api/companies/[id]/stats should respect months parameter","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781145030,"status":"failed","title":"should respect months parameter"},{"ancestorTitles":["Phase 2 Accounting API Tests","GET /api/companies/[id]/stats"],"duration":1,"failing":false,"failureDetails":[{}],"failureMessages":["TypeError: fetch failed\n    at node:internal/deps/undici/undici:13502:13\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at apiRequest (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\api\\accounting.test.ts:21:20)\n    at Object.<anonymous> (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\api\\accounting.test.ts:173:24)"],"fullName":"Phase 2 Accounting API Tests GET /api/companies/[id]/stats should validate months parameter range (1-60)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781145030,"status":"failed","title":"should validate months parameter range (1-60)"},{"ancestorTitles":["Phase 2 Accounting API Tests","GET /api/companies/[id]/stats"],"duration":0,"failing":false,"failureDetails":[{}],"failureMessages":["TypeError: fetch failed\n    at node:internal/deps/undici/undici:13502:13\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at apiRequest (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\api\\accounting.test.ts:21:20)\n    at Object.<anonymous> (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\api\\accounting.test.ts:173:24)"],"fullName":"Phase 2 Accounting API Tests GET /api/companies/[id]/stats should handle non-existent company ID","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781145031,"status":"failed","title":"should handle non-existent company ID"},{"ancestorTitles":["Phase 2 Accounting API Tests","GET /api/companies/[id]/stats"],"duration":0,"failing":false,"failureDetails":[{}],"failureMessages":["TypeError: fetch failed\n    at node:internal/deps/undici/undici:13502:13\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at apiRequest (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\api\\accounting.test.ts:21:20)\n    at Object.<anonymous> (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\api\\accounting.test.ts:173:24)"],"fullName":"Phase 2 Accounting API Tests GET /api/companies/[id]/stats should calculate statistics correctly","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781145031,"status":"failed","title":"should calculate statistics correctly"},{"ancestorTitles":["Phase 2 Accounting API Tests","PATCH /api/companies/[id]"],"duration":4,"failing":false,"failureDetails":[],"failureMessages":[],"fullName":"Phase 2 Accounting API Tests PATCH /api/companies/[id] should update company with valid Phase 2 fields","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781145032,"status":"passed","title":"should update company with valid Phase 2 fields"},{"ancestorTitles":["Phase 2 Accounting API Tests","PATCH /api/companies/[id]"],"duration":2,"failing":false,"failureDetails":[],"failureMessages":[],"fullName":"Phase 2 Accounting API Tests PATCH /api/companies/[id] should reject invalid company_category","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781145036,"status":"passed","title":"should reject invalid company_category"},{"ancestorTitles":["Phase 2 Accounting API Tests","PATCH /api/companies/[id]"],"duration":2,"failing":false,"failureDetails":[],"failureMessages":[],"fullName":"Phase 2 Accounting API Tests PATCH /api/companies/[id] should accept all valid company categories","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781145038,"status":"passed","title":"should accept all valid company categories"},{"ancestorTitles":["Phase 2 Accounting API Tests","PATCH /api/companies/[id]"],"duration":1,"failing":false,"failureDetails":[],"failureMessages":[],"fullName":"Phase 2 Accounting API Tests PATCH /api/companies/[id] should validate business_info structure","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781145040,"status":"passed","title":"should validate business_info structure"},{"ancestorTitles":["Phase 2 Accounting API Tests","PATCH /api/companies/[id]"],"duration":1,"failing":false,"failureDetails":[],"failureMessages":[],"fullName":"Phase 2 Accounting API Tests PATCH /api/companies/[id] should preserve Korean characters in business_info","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781145042,"status":"passed","title":"should preserve Korean characters in business_info"},{"ancestorTitles":["Phase 2 Accounting API Tests","PATCH /api/companies/[id]"],"duration":8,"failing":false,"failureDetails":[{}],"failureMessages":["TypeError: fetch failed\n    at node:internal/deps/undici/undici:13502:13\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at apiRequest (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\api\\accounting.test.ts:21:20)\n    at Object.<anonymous> (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\api\\accounting.test.ts:404:34)"],"fullName":"Phase 2 Accounting API Tests PATCH /api/companies/[id] should handle non-existent company ID with 404","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781145044,"status":"failed","title":"should handle non-existent company ID with 404"},{"ancestorTitles":["Phase 2 Accounting API Tests","GET /api/accounting/export"],"duration":4,"failing":false,"failureDetails":[{}],"failureMessages":["TypeError: fetch failed\n    at node:internal/deps/undici/undici:13502:13\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at Object.<anonymous> (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\api\\accounting.test.ts:421:24)"],"fullName":"Phase 2 Accounting API Tests GET /api/accounting/export should return Excel file with valid parameters","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781145052,"status":"failed","title":"should return Excel file with valid parameters"},{"ancestorTitles":["Phase 2 Accounting API Tests","GET /api/accounting/export"],"duration":5,"failing":false,"failureDetails":[{}],"failureMessages":["TypeError: fetch failed\n    at node:internal/deps/undici/undici:13502:13\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at Object.<anonymous> (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\api\\accounting.test.ts:433:24)"],"fullName":"Phase 2 Accounting API Tests GET /api/accounting/export should include category in filename when filtered","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781145056,"status":"failed","title":"should include category in filename when filtered"},{"ancestorTitles":["Phase 2 Accounting API Tests","GET /api/accounting/export"],"duration":3,"failing":false,"failureDetails":[{}],"failureMessages":["TypeError: fetch failed\n    at node:internal/deps/undici/undici:13502:13\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at Object.<anonymous> (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\api\\accounting.test.ts:443:24)"],"fullName":"Phase 2 Accounting API Tests GET /api/accounting/export should use current month when not provided","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781145061,"status":"failed","title":"should use current month when not provided"},{"ancestorTitles":["Phase 2 Accounting API Tests","GET /api/accounting/export"],"duration":3,"failing":false,"failureDetails":[{}],"failureMessages":["TypeError: fetch failed\n    at node:internal/deps/undici/undici:13502:13\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at Object.<anonymous> (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\api\\accounting.test.ts:459:26)"],"fullName":"Phase 2 Accounting API Tests GET /api/accounting/export should handle all valid categories in export","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781145064,"status":"failed","title":"should handle all valid categories in export"},{"ancestorTitles":["Phase 2 Accounting API Tests","Integration Tests"],"duration":3,"failing":false,"failureDetails":[{}],"failureMessages":["TypeError: fetch failed\n    at node:internal/deps/undici/undici:13502:13\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at apiRequest (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\api\\accounting.test.ts:21:20)\n    at Object.<anonymous> (C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\api\\accounting.test.ts:475:37)"],"fullName":"Phase 2 Accounting API Tests Integration Tests should maintain data consistency across endpoints","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781145068,"status":"failed","title":"should maintain data consistency across endpoints"},{"ancestorTitles":["Phase 2 Accounting API Tests","Integration Tests"],"duration":2,"failing":false,"failureDetails":[],"failureMessages":[],"fullName":"Phase 2 Accounting API Tests Integration Tests should reflect updates immediately after PATCH","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"startAt":1761781145071,"status":"passed","title":"should reflect updates immediately after PATCH"}],"endTime":1761781145197,"message":"  ● Phase 2 Accounting API Tests › GET /api/accounting/monthly-summary › should return monthly summary with valid month parameter\n\n    TypeError: fetch failed\n\n    \u001b[0m \u001b[90m 19 |\u001b[39m \u001b[90m// Helper function to make API requests\u001b[39m\n     \u001b[90m 20 |\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m apiRequest(endpoint\u001b[33m:\u001b[39m string\u001b[33m,\u001b[39m options\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[33mRequestInit\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 21 |\u001b[39m   \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m fetch(\u001b[32m`${API_BASE_URL}${endpoint}`\u001b[39m\u001b[33m,\u001b[39m {\n     \u001b[90m    |\u001b[39m                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 22 |\u001b[39m     \u001b[33m...\u001b[39moptions\u001b[33m,\u001b[39m\n     \u001b[90m 23 |\u001b[39m     headers\u001b[33m:\u001b[39m {\n     \u001b[90m 24 |\u001b[39m       \u001b[32m'Content-Type'\u001b[39m\u001b[33m:\u001b[39m \u001b[32m'application/json; charset=utf-8'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\n      at apiRequest (src/__tests__/api/accounting.test.ts:21:20)\n      at Object.<anonymous> (src/__tests__/api/accounting.test.ts:60:34)\n\n    Cause:\n    AggregateError:\n\n\n  ● Phase 2 Accounting API Tests › GET /api/accounting/monthly-summary › should use current month when month parameter not provided\n\n    TypeError: fetch failed\n\n    \u001b[0m \u001b[90m 19 |\u001b[39m \u001b[90m// Helper function to make API requests\u001b[39m\n     \u001b[90m 20 |\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m apiRequest(endpoint\u001b[33m:\u001b[39m string\u001b[33m,\u001b[39m options\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[33mRequestInit\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 21 |\u001b[39m   \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m fetch(\u001b[32m`${API_BASE_URL}${endpoint}`\u001b[39m\u001b[33m,\u001b[39m {\n     \u001b[90m    |\u001b[39m                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 22 |\u001b[39m     \u001b[33m...\u001b[39moptions\u001b[33m,\u001b[39m\n     \u001b[90m 23 |\u001b[39m     headers\u001b[33m:\u001b[39m {\n     \u001b[90m 24 |\u001b[39m       \u001b[32m'Content-Type'\u001b[39m\u001b[33m:\u001b[39m \u001b[32m'application/json; charset=utf-8'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\n      at apiRequest (src/__tests__/api/accounting.test.ts:21:20)\n      at Object.<anonymous> (src/__tests__/api/accounting.test.ts:87:34)\n\n    Cause:\n    AggregateError:\n\n\n  ● Phase 2 Accounting API Tests › GET /api/accounting/monthly-summary › should filter by category when provided\n\n    TypeError: fetch failed\n\n    \u001b[0m \u001b[90m 19 |\u001b[39m \u001b[90m// Helper function to make API requests\u001b[39m\n     \u001b[90m 20 |\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m apiRequest(endpoint\u001b[33m:\u001b[39m string\u001b[33m,\u001b[39m options\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[33mRequestInit\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 21 |\u001b[39m   \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m fetch(\u001b[32m`${API_BASE_URL}${endpoint}`\u001b[39m\u001b[33m,\u001b[39m {\n     \u001b[90m    |\u001b[39m                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 22 |\u001b[39m     \u001b[33m...\u001b[39moptions\u001b[33m,\u001b[39m\n     \u001b[90m 23 |\u001b[39m     headers\u001b[33m:\u001b[39m {\n     \u001b[90m 24 |\u001b[39m       \u001b[32m'Content-Type'\u001b[39m\u001b[33m:\u001b[39m \u001b[32m'application/json; charset=utf-8'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\n      at apiRequest (src/__tests__/api/accounting.test.ts:21:20)\n      at Object.<anonymous> (src/__tests__/api/accounting.test.ts:97:34)\n\n    Cause:\n    AggregateError:\n\n\n  ● Phase 2 Accounting API Tests › GET /api/accounting/monthly-summary › should handle invalid month format with 400 error\n\n    TypeError: fetch failed\n\n    \u001b[0m \u001b[90m 19 |\u001b[39m \u001b[90m// Helper function to make API requests\u001b[39m\n     \u001b[90m 20 |\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m apiRequest(endpoint\u001b[33m:\u001b[39m string\u001b[33m,\u001b[39m options\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[33mRequestInit\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 21 |\u001b[39m   \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m fetch(\u001b[32m`${API_BASE_URL}${endpoint}`\u001b[39m\u001b[33m,\u001b[39m {\n     \u001b[90m    |\u001b[39m                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 22 |\u001b[39m     \u001b[33m...\u001b[39moptions\u001b[33m,\u001b[39m\n     \u001b[90m 23 |\u001b[39m     headers\u001b[33m:\u001b[39m {\n     \u001b[90m 24 |\u001b[39m       \u001b[32m'Content-Type'\u001b[39m\u001b[33m:\u001b[39m \u001b[32m'application/json; charset=utf-8'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\n      at apiRequest (src/__tests__/api/accounting.test.ts:21:20)\n      at Object.<anonymous> (src/__tests__/api/accounting.test.ts:111:34)\n\n    Cause:\n    AggregateError:\n\n\n  ● Phase 2 Accounting API Tests › GET /api/accounting/monthly-summary › should handle Korean characters in category parameter\n\n    TypeError: fetch failed\n\n    \u001b[0m \u001b[90m 19 |\u001b[39m \u001b[90m// Helper function to make API requests\u001b[39m\n     \u001b[90m 20 |\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m apiRequest(endpoint\u001b[33m:\u001b[39m string\u001b[33m,\u001b[39m options\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[33mRequestInit\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 21 |\u001b[39m   \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m fetch(\u001b[32m`${API_BASE_URL}${endpoint}`\u001b[39m\u001b[33m,\u001b[39m {\n     \u001b[90m    |\u001b[39m                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 22 |\u001b[39m     \u001b[33m...\u001b[39moptions\u001b[33m,\u001b[39m\n     \u001b[90m 23 |\u001b[39m     headers\u001b[33m:\u001b[39m {\n     \u001b[90m 24 |\u001b[39m       \u001b[32m'Content-Type'\u001b[39m\u001b[33m:\u001b[39m \u001b[32m'application/json; charset=utf-8'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\n      at apiRequest (src/__tests__/api/accounting.test.ts:21:20)\n      at Object.<anonymous> (src/__tests__/api/accounting.test.ts:128:36)\n\n    Cause:\n    AggregateError:\n\n\n  ● Phase 2 Accounting API Tests › GET /api/accounting/monthly-summary › should calculate correct totals and aggregations\n\n    TypeError: fetch failed\n\n    \u001b[0m \u001b[90m 19 |\u001b[39m \u001b[90m// Helper function to make API requests\u001b[39m\n     \u001b[90m 20 |\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m apiRequest(endpoint\u001b[33m:\u001b[39m string\u001b[33m,\u001b[39m options\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[33mRequestInit\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 21 |\u001b[39m   \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m fetch(\u001b[32m`${API_BASE_URL}${endpoint}`\u001b[39m\u001b[33m,\u001b[39m {\n     \u001b[90m    |\u001b[39m                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 22 |\u001b[39m     \u001b[33m...\u001b[39moptions\u001b[33m,\u001b[39m\n     \u001b[90m 23 |\u001b[39m     headers\u001b[33m:\u001b[39m {\n     \u001b[90m 24 |\u001b[39m       \u001b[32m'Content-Type'\u001b[39m\u001b[33m:\u001b[39m \u001b[32m'application/json; charset=utf-8'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\n      at apiRequest (src/__tests__/api/accounting.test.ts:21:20)\n      at Object.<anonymous> (src/__tests__/api/accounting.test.ts:136:24)\n\n    Cause:\n    AggregateError:\n\n\n  ● Phase 2 Accounting API Tests › GET /api/accounting/monthly-summary › should return category summary with percentages\n\n    TypeError: fetch failed\n\n    \u001b[0m \u001b[90m 19 |\u001b[39m \u001b[90m// Helper function to make API requests\u001b[39m\n     \u001b[90m 20 |\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m apiRequest(endpoint\u001b[33m:\u001b[39m string\u001b[33m,\u001b[39m options\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[33mRequestInit\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 21 |\u001b[39m   \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m fetch(\u001b[32m`${API_BASE_URL}${endpoint}`\u001b[39m\u001b[33m,\u001b[39m {\n     \u001b[90m    |\u001b[39m                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 22 |\u001b[39m     \u001b[33m...\u001b[39moptions\u001b[33m,\u001b[39m\n     \u001b[90m 23 |\u001b[39m     headers\u001b[33m:\u001b[39m {\n     \u001b[90m 24 |\u001b[39m       \u001b[32m'Content-Type'\u001b[39m\u001b[33m:\u001b[39m \u001b[32m'application/json; charset=utf-8'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\n      at apiRequest (src/__tests__/api/accounting.test.ts:21:20)\n      at Object.<anonymous> (src/__tests__/api/accounting.test.ts:152:24)\n\n    Cause:\n    AggregateError:\n\n\n  ● Phase 2 Accounting API Tests › GET /api/companies/[id]/stats › should return company stats with default 12 months\n\n    TypeError: fetch failed\n\n    \u001b[0m \u001b[90m 19 |\u001b[39m \u001b[90m// Helper function to make API requests\u001b[39m\n     \u001b[90m 20 |\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m apiRequest(endpoint\u001b[33m:\u001b[39m string\u001b[33m,\u001b[39m options\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[33mRequestInit\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 21 |\u001b[39m   \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m fetch(\u001b[32m`${API_BASE_URL}${endpoint}`\u001b[39m\u001b[33m,\u001b[39m {\n     \u001b[90m    |\u001b[39m                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 22 |\u001b[39m     \u001b[33m...\u001b[39moptions\u001b[33m,\u001b[39m\n     \u001b[90m 23 |\u001b[39m     headers\u001b[33m:\u001b[39m {\n     \u001b[90m 24 |\u001b[39m       \u001b[32m'Content-Type'\u001b[39m\u001b[33m:\u001b[39m \u001b[32m'application/json; charset=utf-8'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\n      at apiRequest (src/__tests__/api/accounting.test.ts:21:20)\n      at Object.<anonymous> (src/__tests__/api/accounting.test.ts:173:24)\n\n    Cause:\n    AggregateError:\n\n\n  ● Phase 2 Accounting API Tests › GET /api/companies/[id]/stats › should respect months parameter\n\n    TypeError: fetch failed\n\n    \u001b[0m \u001b[90m 19 |\u001b[39m \u001b[90m// Helper function to make API requests\u001b[39m\n     \u001b[90m 20 |\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m apiRequest(endpoint\u001b[33m:\u001b[39m string\u001b[33m,\u001b[39m options\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[33mRequestInit\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 21 |\u001b[39m   \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m fetch(\u001b[32m`${API_BASE_URL}${endpoint}`\u001b[39m\u001b[33m,\u001b[39m {\n     \u001b[90m    |\u001b[39m                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 22 |\u001b[39m     \u001b[33m...\u001b[39moptions\u001b[33m,\u001b[39m\n     \u001b[90m 23 |\u001b[39m     headers\u001b[33m:\u001b[39m {\n     \u001b[90m 24 |\u001b[39m       \u001b[32m'Content-Type'\u001b[39m\u001b[33m:\u001b[39m \u001b[32m'application/json; charset=utf-8'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\n      at apiRequest (src/__tests__/api/accounting.test.ts:21:20)\n      at Object.<anonymous> (src/__tests__/api/accounting.test.ts:173:24)\n\n    Cause:\n    AggregateError:\n\n\n  ● Phase 2 Accounting API Tests › GET /api/companies/[id]/stats › should validate months parameter range (1-60)\n\n    TypeError: fetch failed\n\n    \u001b[0m \u001b[90m 19 |\u001b[39m \u001b[90m// Helper function to make API requests\u001b[39m\n     \u001b[90m 20 |\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m apiRequest(endpoint\u001b[33m:\u001b[39m string\u001b[33m,\u001b[39m options\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[33mRequestInit\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 21 |\u001b[39m   \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m fetch(\u001b[32m`${API_BASE_URL}${endpoint}`\u001b[39m\u001b[33m,\u001b[39m {\n     \u001b[90m    |\u001b[39m                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 22 |\u001b[39m     \u001b[33m...\u001b[39moptions\u001b[33m,\u001b[39m\n     \u001b[90m 23 |\u001b[39m     headers\u001b[33m:\u001b[39m {\n     \u001b[90m 24 |\u001b[39m       \u001b[32m'Content-Type'\u001b[39m\u001b[33m:\u001b[39m \u001b[32m'application/json; charset=utf-8'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\n      at apiRequest (src/__tests__/api/accounting.test.ts:21:20)\n      at Object.<anonymous> (src/__tests__/api/accounting.test.ts:173:24)\n\n    Cause:\n    AggregateError:\n\n\n  ● Phase 2 Accounting API Tests › GET /api/companies/[id]/stats › should handle non-existent company ID\n\n    TypeError: fetch failed\n\n    \u001b[0m \u001b[90m 19 |\u001b[39m \u001b[90m// Helper function to make API requests\u001b[39m\n     \u001b[90m 20 |\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m apiRequest(endpoint\u001b[33m:\u001b[39m string\u001b[33m,\u001b[39m options\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[33mRequestInit\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 21 |\u001b[39m   \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m fetch(\u001b[32m`${API_BASE_URL}${endpoint}`\u001b[39m\u001b[33m,\u001b[39m {\n     \u001b[90m    |\u001b[39m                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 22 |\u001b[39m     \u001b[33m...\u001b[39moptions\u001b[33m,\u001b[39m\n     \u001b[90m 23 |\u001b[39m     headers\u001b[33m:\u001b[39m {\n     \u001b[90m 24 |\u001b[39m       \u001b[32m'Content-Type'\u001b[39m\u001b[33m:\u001b[39m \u001b[32m'application/json; charset=utf-8'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\n      at apiRequest (src/__tests__/api/accounting.test.ts:21:20)\n      at Object.<anonymous> (src/__tests__/api/accounting.test.ts:173:24)\n\n    Cause:\n    AggregateError:\n\n\n  ● Phase 2 Accounting API Tests › GET /api/companies/[id]/stats › should calculate statistics correctly\n\n    TypeError: fetch failed\n\n    \u001b[0m \u001b[90m 19 |\u001b[39m \u001b[90m// Helper function to make API requests\u001b[39m\n     \u001b[90m 20 |\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m apiRequest(endpoint\u001b[33m:\u001b[39m string\u001b[33m,\u001b[39m options\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[33mRequestInit\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 21 |\u001b[39m   \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m fetch(\u001b[32m`${API_BASE_URL}${endpoint}`\u001b[39m\u001b[33m,\u001b[39m {\n     \u001b[90m    |\u001b[39m                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 22 |\u001b[39m     \u001b[33m...\u001b[39moptions\u001b[33m,\u001b[39m\n     \u001b[90m 23 |\u001b[39m     headers\u001b[33m:\u001b[39m {\n     \u001b[90m 24 |\u001b[39m       \u001b[32m'Content-Type'\u001b[39m\u001b[33m:\u001b[39m \u001b[32m'application/json; charset=utf-8'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\n      at apiRequest (src/__tests__/api/accounting.test.ts:21:20)\n      at Object.<anonymous> (src/__tests__/api/accounting.test.ts:173:24)\n\n    Cause:\n    AggregateError:\n\n\n  ● Phase 2 Accounting API Tests › PATCH /api/companies/[id] › should handle non-existent company ID with 404\n\n    TypeError: fetch failed\n\n    \u001b[0m \u001b[90m 19 |\u001b[39m \u001b[90m// Helper function to make API requests\u001b[39m\n     \u001b[90m 20 |\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m apiRequest(endpoint\u001b[33m:\u001b[39m string\u001b[33m,\u001b[39m options\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[33mRequestInit\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 21 |\u001b[39m   \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m fetch(\u001b[32m`${API_BASE_URL}${endpoint}`\u001b[39m\u001b[33m,\u001b[39m {\n     \u001b[90m    |\u001b[39m                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 22 |\u001b[39m     \u001b[33m...\u001b[39moptions\u001b[33m,\u001b[39m\n     \u001b[90m 23 |\u001b[39m     headers\u001b[33m:\u001b[39m {\n     \u001b[90m 24 |\u001b[39m       \u001b[32m'Content-Type'\u001b[39m\u001b[33m:\u001b[39m \u001b[32m'application/json; charset=utf-8'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\n      at apiRequest (src/__tests__/api/accounting.test.ts:21:20)\n      at Object.<anonymous> (src/__tests__/api/accounting.test.ts:404:34)\n\n    Cause:\n    AggregateError:\n\n\n  ● Phase 2 Accounting API Tests › GET /api/accounting/export › should return Excel file with valid parameters\n\n    TypeError: fetch failed\n\n    \u001b[0m \u001b[90m 419 |\u001b[39m\n     \u001b[90m 420 |\u001b[39m     it(\u001b[32m'should return Excel file with valid parameters'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 421 |\u001b[39m       \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m fetch(\u001b[32m`${API_BASE_URL}/api/accounting/export?month=${testMonth}`\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                        \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 422 |\u001b[39m\n     \u001b[90m 423 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m200\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 424 |\u001b[39m       expect(response\u001b[33m.\u001b[39mheaders\u001b[33m.\u001b[39m\u001b[36mget\u001b[39m(\u001b[32m'content-type'\u001b[39m))\u001b[33m.\u001b[39mtoContain(\u001b[32m'spreadsheetml'\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.<anonymous> (src/__tests__/api/accounting.test.ts:421:24)\n\n    Cause:\n    AggregateError:\n\n\n  ● Phase 2 Accounting API Tests › GET /api/accounting/export › should include category in filename when filtered\n\n    TypeError: fetch failed\n\n    \u001b[0m \u001b[90m 431 |\u001b[39m     it(\u001b[32m'should include category in filename when filtered'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n     \u001b[90m 432 |\u001b[39m       \u001b[36mconst\u001b[39m category \u001b[33m=\u001b[39m encodeKorean(\u001b[32m'소모품업체'\u001b[39m)\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 433 |\u001b[39m       \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m fetch(\u001b[32m`${API_BASE_URL}/api/accounting/export?month=${testMonth}&category=${category}`\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                        \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 434 |\u001b[39m\n     \u001b[90m 435 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m200\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 436 |\u001b[39m\u001b[0m\n\n      at Object.<anonymous> (src/__tests__/api/accounting.test.ts:433:24)\n\n    Cause:\n    AggregateError:\n\n\n  ● Phase 2 Accounting API Tests › GET /api/accounting/export › should use current month when not provided\n\n    TypeError: fetch failed\n\n    \u001b[0m \u001b[90m 441 |\u001b[39m\n     \u001b[90m 442 |\u001b[39m     it(\u001b[32m'should use current month when not provided'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 443 |\u001b[39m       \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m fetch(\u001b[32m`${API_BASE_URL}/api/accounting/export`\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                        \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 444 |\u001b[39m\n     \u001b[90m 445 |\u001b[39m       expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m200\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 446 |\u001b[39m       expect(response\u001b[33m.\u001b[39mheaders\u001b[33m.\u001b[39m\u001b[36mget\u001b[39m(\u001b[32m'content-type'\u001b[39m))\u001b[33m.\u001b[39mtoContain(\u001b[32m'spreadsheetml'\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.<anonymous> (src/__tests__/api/accounting.test.ts:443:24)\n\n    Cause:\n    AggregateError:\n\n\n  ● Phase 2 Accounting API Tests › GET /api/accounting/export › should handle all valid categories in export\n\n    TypeError: fetch failed\n\n    \u001b[0m \u001b[90m 457 |\u001b[39m       \u001b[36mfor\u001b[39m (\u001b[36mconst\u001b[39m category \u001b[36mof\u001b[39m categories) {\n     \u001b[90m 458 |\u001b[39m         \u001b[36mconst\u001b[39m encoded \u001b[33m=\u001b[39m encodeKorean(category)\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 459 |\u001b[39m         \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m fetch(\u001b[32m`${API_BASE_URL}/api/accounting/export?month=${testMonth}&category=${encoded}`\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 460 |\u001b[39m\n     \u001b[90m 461 |\u001b[39m         expect(response\u001b[33m.\u001b[39mstatus)\u001b[33m.\u001b[39mtoBe(\u001b[35m200\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 462 |\u001b[39m         expect(response\u001b[33m.\u001b[39mheaders\u001b[33m.\u001b[39m\u001b[36mget\u001b[39m(\u001b[32m'content-type'\u001b[39m))\u001b[33m.\u001b[39mtoContain(\u001b[32m'spreadsheetml'\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.<anonymous> (src/__tests__/api/accounting.test.ts:459:26)\n\n    Cause:\n    AggregateError:\n\n\n  ● Phase 2 Accounting API Tests › Integration Tests › should maintain data consistency across endpoints\n\n    TypeError: fetch failed\n\n    \u001b[0m \u001b[90m 19 |\u001b[39m \u001b[90m// Helper function to make API requests\u001b[39m\n     \u001b[90m 20 |\u001b[39m \u001b[36masync\u001b[39m \u001b[36mfunction\u001b[39m apiRequest(endpoint\u001b[33m:\u001b[39m string\u001b[33m,\u001b[39m options\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m \u001b[33mRequestInit\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 21 |\u001b[39m   \u001b[36mconst\u001b[39m response \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m fetch(\u001b[32m`${API_BASE_URL}${endpoint}`\u001b[39m\u001b[33m,\u001b[39m {\n     \u001b[90m    |\u001b[39m                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 22 |\u001b[39m     \u001b[33m...\u001b[39moptions\u001b[33m,\u001b[39m\n     \u001b[90m 23 |\u001b[39m     headers\u001b[33m:\u001b[39m {\n     \u001b[90m 24 |\u001b[39m       \u001b[32m'Content-Type'\u001b[39m\u001b[33m:\u001b[39m \u001b[32m'application/json; charset=utf-8'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\n      at apiRequest (src/__tests__/api/accounting.test.ts:21:20)\n      at Object.<anonymous> (src/__tests__/api/accounting.test.ts:475:37)\n\n    Cause:\n    AggregateError:\n\n","name":"C:\\Users\\USER\\claude_code\\FITaeYoungERP\\src\\__tests__\\api\\accounting.test.ts","startTime":1761781142259,"status":"failed","summary":""}],"wasInterrupted":false}
