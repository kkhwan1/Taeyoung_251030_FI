#!/usr/bin/env tsx

/**
 * Phase 5: Import Master Data to Supabase
 * Companies, Items, BOM relationships
 */

import * as fs from 'fs';
import * as path from 'path';
import { config } from 'dotenv';
import { createClient } from '@supabase/supabase-js';

// Load environment variables
config();

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå ÌôòÍ≤Ω Î≥ÄÏàòÍ∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. .env ÌååÏùºÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî.');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function main() {
  console.log('üì• Phase 5: Supabase Îç∞Ïù¥ÌÑ∞ ÏûÑÌè¨Ìä∏ ÏãúÏûë...\n');

  // Load validated data
  const validatedPath = path.join(process.cwd(), 'scripts', 'migration', 'validated', 'validated-master-data.json');
  const data = JSON.parse(fs.readFileSync(validatedPath, 'utf-8'));

  console.log(`üìä ÏûÑÌè¨Ìä∏Ìï† Îç∞Ïù¥ÌÑ∞:`);
  console.log(`   - Í±∞ÎûòÏ≤ò: ${data.companies.length}Í∞ú`);
  console.log(`   - ÌíàÎ™©: ${data.items.length}Í∞ú`);
  console.log(`   - BOM Í¥ÄÍ≥Ñ: ${data.bom_records.length}Í∞ú\n`);

  let imported = {
    companies: 0,
    items: 0,
    bom: 0,
    errors: [] as string[]
  };

  // 1. Import Companies
  console.log('1Ô∏è‚É£ Í±∞ÎûòÏ≤ò ÏûÑÌè¨Ìä∏...');
  for (const company of data.companies) {
    const { error } = await supabase
      .from('companies')
      .upsert({
        company_code: company.company_code,
        company_name: company.company_name,
        company_type: company.company_type,
        is_active: company.is_active
      }, { onConflict: 'company_code' });

    if (error) {
      imported.errors.push(`Í±∞ÎûòÏ≤ò ${company.company_code}: ${error.message}`);
    } else {
      imported.companies++;
    }
  }
  console.log(`   ‚úÖ ${imported.companies}/${data.companies.length}Í∞ú ÏôÑÎ£å\n`);

  // 2. Import Items (need to map supplier names to IDs)
  console.log('2Ô∏è‚É£ ÌíàÎ™© ÏûÑÌè¨Ìä∏...');

  // Get supplier IDs
  const { data: suppliers } = await supabase
    .from('companies')
    .select('company_id, company_name, company_code')
    .eq('company_type', 'Í≥µÍ∏âÏÇ¨');

  const supplierMap = new Map(
    suppliers?.map(s => [s.company_name, s.company_id]) || []
  );

  for (const item of data.items) {
    // Try to find supplier ID from category/notes
    let supplierId: number | null = null;
    if (item.category && item.category !== 'Í∏∞ÌÉÄ') {
      supplierId = supplierMap.get(item.category) || null;
    }

    // Map to database category enum
    const categoryMap: { [key: string]: string } = {
      'Í∏∞ÌÉÄ': 'ÏÉÅÌíà',
      'ÌÉúÏ∞ΩÍ∏àÏÜç': 'Ï†úÌíà',
      'ÏÇ¨Í∏â': 'ÏõêÏûêÏû¨',
      'ÌïòÎìúÏõ®Ïñ¥': 'Î∂ÄÏûêÏû¨'
    };
    const dbCategory = categoryMap[item.category || 'Í∏∞ÌÉÄ'] || 'ÏÉÅÌíà';

    const { error } = await supabase
      .from('items')
      .upsert({
        item_code: item.item_code,
        item_name: item.item_name,
        spec: item.spec,
        category: dbCategory,
        price: item.unit_price || 0,
        supplier_id: supplierId,
        is_active: item.is_active
      }, { onConflict: 'item_code' });

    if (error) {
      imported.errors.push(`ÌíàÎ™© ${item.item_code}: ${error.message}`);
    } else {
      imported.items++;
    }
  }
  console.log(`   ‚úÖ ${imported.items}/${data.items.length}Í∞ú ÏôÑÎ£å\n`);

  // 3. Import BOM (need to map item codes to IDs)
  console.log('3Ô∏è‚É£ BOM Í¥ÄÍ≥Ñ ÏûÑÌè¨Ìä∏...');

  const { data: items } = await supabase
    .from('items')
    .select('item_id, item_code');

  const itemMap = new Map(
    items?.map(i => [i.item_code, i.item_id]) || []
  );

  for (const bom of data.bom_records) {
    const parentId = itemMap.get(bom.parent_item_code);
    const childId = itemMap.get(bom.child_item_code);

    if (!parentId || !childId) {
      imported.errors.push(`BOM ${bom.parent_item_code} -> ${bom.child_item_code}: ÌíàÎ™© ID Ï∞æÍ∏∞ Ïã§Ìå®`);
      continue;
    }

    const { error } = await supabase
      .from('bom')
      .upsert({
        parent_item_id: parentId,
        child_item_id: childId,
        quantity_required: bom.quantity || 1,
        level_no: 1,
        is_active: true
      });

    if (error) {
      imported.errors.push(`BOM ${bom.parent_item_code} -> ${bom.child_item_code}: ${error.message}`);
    } else {
      imported.bom++;
    }
  }
  console.log(`   ‚úÖ ${imported.bom}/${data.bom_records.length}Í∞ú ÏôÑÎ£å\n`);

  // Report
  console.log('üìä ÏûÑÌè¨Ìä∏ Í≤∞Í≥º:');
  console.log(`   ‚úÖ Í±∞ÎûòÏ≤ò: ${imported.companies}Í∞ú`);
  console.log(`   ‚úÖ ÌíàÎ™©: ${imported.items}Í∞ú`);
  console.log(`   ‚úÖ BOM: ${imported.bom}Í∞ú`);

  if (imported.errors.length > 0) {
    console.log(`\n   ‚ö†Ô∏è ÏóêÎü¨: ${imported.errors.length}Í∞ú`);
    imported.errors.slice(0, 5).forEach(e => console.log(`      - ${e}`));
    if (imported.errors.length > 5) {
      console.log(`      ... ${imported.errors.length - 5}Í∞ú Îçî`);
    }
  }

  console.log('\n‚úÖ Phase 5 ÏôÑÎ£å!');
}

main().catch(console.error);
