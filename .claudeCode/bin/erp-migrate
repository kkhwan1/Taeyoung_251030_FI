#!/usr/bin/env node

/**
 * /erp:migrate - ERP Database Migration Helper
 *
 * Interactive database migration management
 * - Migration status check
 * - Apply pending migrations
 * - Rollback migrations
 * - Database schema validation
 */

const { execSync } = require('child_process');
const readline = require('readline');

const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  red: '\x1b[31m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function exec(command, silent = false) {
  try {
    return execSync(command, { stdio: silent ? 'pipe' : 'inherit', encoding: 'utf8' });
  } catch (error) {
    return null;
  }
}

function prompt(question) {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  return new Promise(resolve => {
    rl.question(question, answer => {
      rl.close();
      resolve(answer.trim().toLowerCase());
    });
  });
}

async function checkMigrationStatus() {
  log('\n📊 마이그레이션 상태 확인 중...', 'cyan');
  const status = exec('npm run migrate:status', true);

  if (status) {
    console.log(status);
    return true;
  }

  log('❌ 마이그레이션 상태 확인 실패', 'red');
  return false;
}

async function applyMigrations() {
  log('\n⬆️  마이그레이션 적용 중...', 'cyan');

  const confirm = await prompt('마이그레이션을 적용하시겠습니까? (yes/no): ');

  if (confirm === 'yes' || confirm === 'y') {
    const result = exec('npm run migrate:up');
    if (result !== null) {
      log('✅ 마이그레이션 적용 완료', 'green');

      // Verify schema after migration
      log('\n🔍 스키마 검증 중...', 'cyan');
      exec('npm run db:check-schema');
    } else {
      log('❌ 마이그레이션 적용 실패', 'red');
    }
  } else {
    log('취소되었습니다', 'yellow');
  }
}

async function rollbackMigration() {
  log('\n⬇️  마이그레이션 롤백 준비...', 'yellow');

  const confirm = await prompt('⚠️  마지막 마이그레이션을 롤백하시겠습니까? (yes/no): ');

  if (confirm === 'yes' || confirm === 'y') {
    const result = exec('npm run migrate:down');
    if (result !== null) {
      log('✅ 마이그레이션 롤백 완료', 'green');
    } else {
      log('❌ 마이그레이션 롤백 실패', 'red');
    }
  } else {
    log('취소되었습니다', 'yellow');
  }
}

async function resetDatabase() {
  log('\n🔄 데이터베이스 리셋 준비...', 'yellow');
  log('⚠️  경고: 모든 데이터가 삭제되고 처음부터 마이그레이션이 재실행됩니다!', 'red');

  const confirm = await prompt('정말로 데이터베이스를 리셋하시겠습니까? (yes/no): ');

  if (confirm === 'yes' || confirm === 'y') {
    const doubleConfirm = await prompt('한 번 더 확인합니다. 계속하시겠습니까? (yes/no): ');

    if (doubleConfirm === 'yes' || doubleConfirm === 'y') {
      const result = exec('npm run migrate:reset');
      if (result !== null) {
        log('✅ 데이터베이스 리셋 완료', 'green');

        // Re-seed data
        const seedConfirm = await prompt('개발 데이터를 다시 생성하시겠습니까? (yes/no): ');
        if (seedConfirm === 'yes' || seedConfirm === 'y') {
          exec('npm run seed:dev');
        }
      } else {
        log('❌ 데이터베이스 리셋 실패', 'red');
      }
    } else {
      log('취소되었습니다', 'yellow');
    }
  } else {
    log('취소되었습니다', 'yellow');
  }
}

async function checkSchema() {
  log('\n🔍 데이터베이스 스키마 검증 중...', 'cyan');
  exec('npm run db:check-schema');

  log('\n📊 테이블 데이터 확인 중...', 'cyan');
  exec('npm run db:check-data');
}

async function showMenu() {
  log('\n╔══════════════════════════════════════╗', 'blue');
  log('║    태창 ERP DB 마이그레이션 도구    ║', 'blue');
  log('╚══════════════════════════════════════╝\n', 'blue');

  log('1. 마이그레이션 상태 확인', 'cyan');
  log('2. 마이그레이션 적용 (migrate:up)', 'cyan');
  log('3. 마이그레이션 롤백 (migrate:down)', 'cyan');
  log('4. 데이터베이스 리셋 (⚠️  위험)', 'yellow');
  log('5. 스키마 검증', 'cyan');
  log('0. 종료\n', 'cyan');

  const choice = await prompt('선택하세요 (0-5): ');

  switch (choice) {
    case '1':
      await checkMigrationStatus();
      break;
    case '2':
      await applyMigrations();
      break;
    case '3':
      await rollbackMigration();
      break;
    case '4':
      await resetDatabase();
      break;
    case '5':
      await checkSchema();
      break;
    case '0':
      log('\n종료합니다.', 'green');
      process.exit(0);
    default:
      log('잘못된 선택입니다', 'red');
  }

  // Show menu again
  await showMenu();
}

async function main() {
  const args = process.argv.slice(2);

  // Direct command execution
  if (args.length > 0) {
    const command = args[0];
    switch (command) {
      case 'status':
        await checkMigrationStatus();
        break;
      case 'up':
        await applyMigrations();
        break;
      case 'down':
        await rollbackMigration();
        break;
      case 'reset':
        await resetDatabase();
        break;
      case 'check':
        await checkSchema();
        break;
      default:
        log(`알 수 없는 명령어: ${command}`, 'red');
        log('사용 가능한 명령어: status, up, down, reset, check', 'yellow');
    }
  } else {
    // Interactive menu
    await showMenu();
  }
}

main().catch(error => {
  log(`\n❌ 오류 발생: ${error.message}`, 'red');
  process.exit(1);
});
