#!/usr/bin/env node

/**
 * /erp:build - ERP Build & Deploy Command
 *
 * Automated build pipeline for Korean ERP system
 * - Type checking
 * - Linting
 * - Production build with Turbopack
 * - Database migration verification
 * - Bundle analysis (optional)
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  red: '\x1b[31m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function exec(command, description) {
  log(`\n🔨 ${description}...`, 'cyan');
  try {
    execSync(command, { stdio: 'inherit' });
    log(`✅ ${description} 완료`, 'green');
    return true;
  } catch (error) {
    log(`❌ ${description} 실패`, 'red');
    return false;
  }
}

async function main() {
  log('\n╔══════════════════════════════════════╗', 'blue');
  log('║   태창 ERP 시스템 빌드 파이프라인   ║', 'blue');
  log('╚══════════════════════════════════════╝\n', 'blue');

  const args = process.argv.slice(2);
  const skipTests = args.includes('--skip-tests');
  const analyze = args.includes('--analyze');
  const deploy = args.includes('--deploy');

  // 1. Type checking
  if (!exec('npm run type-check', 'TypeScript 타입 체크')) {
    process.exit(1);
  }

  // 2. Linting
  if (!exec('npm run lint', 'ESLint 코드 검사')) {
    log('⚠️  린트 경고가 있지만 빌드를 계속합니다', 'yellow');
  }

  // 3. Test suite (optional)
  if (!skipTests) {
    if (!exec('npm run test:all', '전체 테스트 실행')) {
      log('⚠️  일부 테스트 실패, 계속 진행하시겠습니까? (Ctrl+C로 취소)', 'yellow');
      await new Promise(resolve => setTimeout(resolve, 3000));
    }
  }

  // 4. Database migration status
  if (!exec('npm run migrate:status', 'DB 마이그레이션 상태 확인')) {
    log('⚠️  마이그레이션 확인 실패', 'yellow');
  }

  // 5. Production build
  const buildCommand = analyze
    ? 'npm run build:analyze'
    : 'npm run build';

  if (!exec(buildCommand, '프로덕션 빌드')) {
    process.exit(1);
  }

  // 6. Build info
  const buildInfo = {
    timestamp: new Date().toISOString(),
    version: require(path.join(process.cwd(), 'package.json')).version,
    node: process.version,
    analyze: analyze
  };

  fs.writeFileSync(
    path.join(process.cwd(), '.next', 'build-info.json'),
    JSON.stringify(buildInfo, null, 2)
  );

  log('\n╔══════════════════════════════════════╗', 'green');
  log('║        빌드 성공적으로 완료됨        ║', 'green');
  log('╚══════════════════════════════════════╝\n', 'green');

  log(`📦 빌드 버전: ${buildInfo.version}`, 'cyan');
  log(`⏰ 빌드 시간: ${buildInfo.timestamp}`, 'cyan');

  if (analyze) {
    log('\n📊 번들 분석 결과는 브라우저에서 확인하세요', 'yellow');
  }

  if (deploy) {
    log('\n🚀 배포 프로세스를 시작합니다...', 'blue');
    exec('npm run start', '프로덕션 서버 시작');
  }
}

main().catch(error => {
  log(`\n❌ 빌드 실패: ${error.message}`, 'red');
  process.exit(1);
});
