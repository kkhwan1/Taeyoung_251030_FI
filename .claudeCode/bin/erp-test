#!/usr/bin/env node

/**
 * /erp:test - ERP Test Execution Command
 *
 * Comprehensive test suite for Korean ERP system
 * - Unit tests
 * - API integration tests
 * - Security tests
 * - Test coverage reporting
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  red: '\x1b[31m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function exec(command, description, continueOnError = false) {
  log(`\n🧪 ${description}...`, 'cyan');
  try {
    execSync(command, { stdio: 'inherit' });
    log(`✅ ${description} 통과`, 'green');
    return { success: true };
  } catch (error) {
    log(`❌ ${description} 실패`, 'red');
    if (!continueOnError) {
      return { success: false, error };
    }
    return { success: false, error, continued: true };
  }
}

async function runTestSuite() {
  log('\n╔══════════════════════════════════════╗', 'blue');
  log('║     태창 ERP 테스트 실행 중...      ║', 'blue');
  log('╚══════════════════════════════════════╝\n', 'blue');

  const args = process.argv.slice(2);
  const coverage = args.includes('--coverage');
  const watch = args.includes('--watch');
  const api = args.includes('--api');
  const lib = args.includes('--lib');
  const security = args.includes('--security');
  const all = args.includes('--all') || args.length === 0;

  const results = [];

  // 1. Unit tests (lib)
  if (lib || all) {
    const result = exec(
      watch ? 'npm run test:watch' : 'npm run test:lib',
      '유틸리티 라이브러리 테스트',
      true
    );
    results.push({ name: 'Unit Tests', ...result });
  }

  // 2. API tests
  if (api || all) {
    const result = exec(
      'npm run test:api',
      'API 엔드포인트 테스트',
      true
    );
    results.push({ name: 'API Tests', ...result });
  }

  // 3. Security tests
  if (security || all) {
    const result = exec(
      'npm run test:security',
      '보안 취약점 테스트',
      true
    );
    results.push({ name: 'Security Tests', ...result });
  }

  // 4. Coverage report
  if (coverage && !watch) {
    const result = exec(
      'npm run test:coverage',
      '테스트 커버리지 생성',
      true
    );
    results.push({ name: 'Coverage Report', ...result });

    // Read coverage summary if available
    const coveragePath = path.join(process.cwd(), 'coverage', 'coverage-summary.json');
    if (fs.existsSync(coveragePath)) {
      const coverageData = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
      const total = coverageData.total;

      log('\n📊 테스트 커버리지 요약:', 'cyan');
      log(`   - 라인 커버리지: ${total.lines.pct.toFixed(2)}%`, 'cyan');
      log(`   - 브랜치 커버리지: ${total.branches.pct.toFixed(2)}%`, 'cyan');
      log(`   - 함수 커버리지: ${total.functions.pct.toFixed(2)}%`, 'cyan');
      log(`   - 구문 커버리지: ${total.statements.pct.toFixed(2)}%`, 'cyan');

      if (total.lines.pct < 80) {
        log('\n⚠️  경고: 라인 커버리지가 80% 미만입니다', 'yellow');
      }
    }
  }

  // 5. Summary
  log('\n╔══════════════════════════════════════╗', 'blue');
  log('║          테스트 결과 요약            ║', 'blue');
  log('╚══════════════════════════════════════╝\n', 'blue');

  const passed = results.filter(r => r.success).length;
  const failed = results.filter(r => !r.success).length;

  results.forEach(result => {
    const status = result.success ? '✅ 통과' : '❌ 실패';
    const color = result.success ? 'green' : 'red';
    log(`${status} - ${result.name}`, color);
  });

  log(`\n총 ${results.length}개 테스트 스위트`, 'cyan');
  log(`통과: ${passed}개`, 'green');
  if (failed > 0) {
    log(`실패: ${failed}개`, 'red');
  }

  if (failed > 0) {
    log('\n❌ 일부 테스트가 실패했습니다', 'red');
    process.exit(1);
  } else {
    log('\n✅ 모든 테스트가 성공했습니다!', 'green');

    if (coverage) {
      log('\n📊 커버리지 리포트: coverage/lcov-report/index.html', 'cyan');
    }
  }
}

function showHelp() {
  log('\n태창 ERP 테스트 실행 도구', 'blue');
  log('\n사용법:', 'cyan');
  log('  /erp:test [옵션]\n', 'cyan');
  log('옵션:', 'cyan');
  log('  --all        모든 테스트 실행 (기본값)', 'cyan');
  log('  --lib        유틸리티 라이브러리 테스트만 실행', 'cyan');
  log('  --api        API 엔드포인트 테스트만 실행', 'cyan');
  log('  --security   보안 테스트만 실행', 'cyan');
  log('  --coverage   커버리지 리포트 생성', 'cyan');
  log('  --watch      Watch 모드로 실행', 'cyan');
  log('  --help       도움말 표시\n', 'cyan');
  log('예시:', 'yellow');
  log('  /erp:test --api --coverage', 'yellow');
  log('  /erp:test --lib --watch', 'yellow');
  log('  /erp:test --all --coverage\n', 'yellow');
}

async function main() {
  const args = process.argv.slice(2);

  if (args.includes('--help') || args.includes('-h')) {
    showHelp();
    return;
  }

  await runTestSuite();
}

main().catch(error => {
  log(`\n❌ 테스트 실행 중 오류 발생: ${error.message}`, 'red');
  process.exit(1);
});
